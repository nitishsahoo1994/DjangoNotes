Django ORM
=============
emp_list=Employee.objects.all()  ==>return type query set  (select * from employess)

how to filter
=============
qs=Employee.objects.filter(esal__gt=15000)   returns all emp whose sal greater than 15000
qs=Employee.objects.filter(eal__gte=15000) greater than equal
qs=Employee.objects.filter(eal__lt=15000)  less than 
qs=Employee.objects.filter(eal__lte=15000) less than equalto


various fields lookup
====================
Employee.objects.get(id__exact=14)
Employee.objects.get(ename__exact=14)
Employee.objects.get(ename__iexact=14) ===>case insensitive




contains
============
Employee.objects.filter(ename__icontains='john')


in
===
Employee.objects.filter(id__in=[40,41,42,43])


stats_with and endswith
=======================
Employee.objects.filter(ename__startswith='j')



range
=====
Employee.objects.filter(esal_range=(12000,16000))



how to implement OR queries
=============================
Employee.objects.filter(esal__range=(12000,16000))| Employee.objects.filter(ename__istartswith='d')


Employee.objects.filter(Q(esal__range=(12000,16000))|Q(ename__istartswith='j'))


implement AND queries
==========================
Employee.objects.filter(Q(esal__range=(12000,16000))|Q(ename__startswith='j'))




implement NOT queries
=====================
Employee.objects.filter(~Q(esal_range=(12000,16000)))



Union
===========
qs1=Employee.objects.filter(esal__lt=15000)
qs2=Employee.objects.filter(ename__endswith='j')

employees=qs1.union(qs2)


How to select only particular columns:
======================================
Employee.objects.all().values_list('ename','esal')
Employee.objects.all().values('ename','esal')
Employee.objects.all().only('ename','esal') ==> id also select 




Aggregate Functions
=====================
Avg
Sum
Min
Max
Count

from django.db.models import Avg,Sum,Min,Max,Count

avg=Employee.objects.all().aggregate(Avg('esal'))
sum=Employee.objects.all().aggregate(Sum('esal'))
max=Employee.objects.all().aggregate(Max('esal'))
min=Employee.objects.all().aggregate(Min('esal'))
count=Employee.objects.all().aggregate(Max('esal'))

CRUD operation
=============
create
Employee.objects.create(eno=200,ename='Sunny',esal=25785,eaddr='mumbai')


e1=Employee(eno=200,ename='Sunny',esal=25785,eaddr='mumbai')
e2=Employee(eno=300,ename='Funny',esal=25785,eaddr='Delhi')
e3=Employee(eno=400,ename='Chunny',esal=25785,eaddr='Talcher')

Employee.objects.bulk_create([e1,e2,e3])



Delete
-------
e=Employee.objects.get(id=45)
e.delete()



delete multiple

qs=Employee.objects.filter(esal__gt=15000)
qs.delete()



Update
=====
e=Employee.objects.get(eno=2265)
e.ename="Nitish"  
e.save()              =====>updation complete





Order QuerySet
===============
Employee.objects.all().order__by('esal')  ==>asscending order
Employee.objects.all().order__by('-esal') ==>descending order

Employee.objects.all().order__by('-esal') [1]  ====>second highest











































